// Backup of original middleware
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { createClient } from '@supabase/supabase-js'

// Create a Supabase client configured for server-side auth
function createMiddlewareClient(request: NextRequest) {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

  return createClient(supabaseUrl, supabaseAnonKey, {
    auth: {
      persistSession: false
    }
  })
}

export async function middleware(request: NextRequest) {
  const res = NextResponse.next()
  const pathname = request.nextUrl.pathname

  // Protected routes
  const protectedPaths = ['/dashboard']
  const authPaths = ['/login', '/register']

  // Check if user is on a protected route
  const isProtectedRoute = protectedPaths.some(path => pathname.startsWith(path))
  const isAuthRoute = authPaths.some(path => pathname.startsWith(path))

  // Try to get session from Supabase cookies
  const supabase = createMiddlewareClient(request)

  try {
    const { data: { user }, error } = await supabase.auth.getUser()

    console.log('🔍 Middleware auth check:', {
      pathname,
      isProtectedRoute,
      isAuthRoute,
      hasUser: !!user,
      userEmail: user?.email,
      error: error?.message
    })

    if (isProtectedRoute && !user) {
      console.log('🔄 Redirecting to login from protected route')
      const redirectUrl = new URL('/login', request.url)
      redirectUrl.searchParams.set('redirect', pathname)
      return NextResponse.redirect(redirectUrl)
    }

    if (isAuthRoute && user) {
      console.log('🔄 Redirecting to dashboard from auth route')
      return NextResponse.redirect(new URL('/dashboard', request.url))
    }

    return res
  } catch (error) {
    console.error('❌ Middleware auth error:', error)

    // If there's an error and user is trying to access protected route, redirect to login
    if (isProtectedRoute) {
      const redirectUrl = new URL('/login', request.url)
      redirectUrl.searchParams.set('redirect', pathname)
      return NextResponse.redirect(redirectUrl)
    }

    return res
  }
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public (public files)
     */
    '/((?!api|_next/static|_next/image|favicon.ico|public).*)',
  ],
}